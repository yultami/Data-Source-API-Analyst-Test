{
	"info": {
		"_postman_id": "7a4f152c-1c6a-405c-b84d-7d336992eaed",
		"name": "Github API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39990446"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Authenticate",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{Authorization}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.github.com/user",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Requests",
			"item": [
				{
					"name": "Search Repositories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// handle request speed\r",
									"if (pm.response.code === 429) {\r",
									"    console.log(\"Rate limit exceeded. Waiting before retrying...\");\r",
									"    pm.environment.set(\"retryAfter\", pm.response.headers.get(\"Retry-After\"));\r",
									"    setTimeout(function() {\r",
									"        pm.test(\"Rate limit handling\", function() {\r",
									"            pm.expect(pm.response.code).to.eql(200);\r",
									"        });\r",
									"    }, pm.environment.get(\"retryAfter\") * 1000);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-GitHub-Api-Version",
								"value": "{{X-GitHub-Api-Version}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.github.com/search/repositories?q=stars:>=0&sort=stars&order=desk",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"search",
								"repositories"
							],
							"query": [
								{
									"key": "q",
									"value": "stars:>=0"
								},
								{
									"key": "sort",
									"value": "stars"
								},
								{
									"key": "order",
									"value": "desk"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Commits",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// handle request speed\r",
									"if (pm.response.code === 429) {\r",
									"    console.log(\"Rate limit exceeded. Waiting before retrying...\");\r",
									"    pm.environment.set(\"retryAfter\", pm.response.headers.get(\"Retry-After\"));\r",
									"    setTimeout(function() {\r",
									"        pm.test(\"Rate limit handling\", function() {\r",
									"            pm.expect(pm.response.code).to.eql(200);\r",
									"        });\r",
									"    }, pm.environment.get(\"retryAfter\") * 1000);\r",
									"}\r",
									"\r",
									"// 404 error checking\r",
									"if (pm.response.code === 404) {\r",
									"    console.log(\"Resource not found. Please check the URL and parameters.\");\r",
									"    pm.test(\"Resource not found\", function () {\r",
									"        pm.expect(pm.response.code).to.eql(404);\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Request was successful\", function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-GitHub-Api-Version",
								"value": "{{X-GitHub-Api-Version}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.github.com/repos/{{owner}}/{{repo}}/commits",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"repos",
								"{{owner}}",
								"{{repo}}",
								"commits"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// handle request speed\r",
									"if (pm.response.code === 429) {\r",
									"    console.log(\"Rate limit exceeded. Waiting before retrying...\");\r",
									"    pm.environment.set(\"retryAfter\", pm.response.headers.get(\"Retry-After\"));\r",
									"    setTimeout(function() {\r",
									"        pm.test(\"Rate limit handling\", function() {\r",
									"            pm.expect(pm.response.code).to.eql(200);\r",
									"        });\r",
									"    }, pm.environment.get(\"retryAfter\") * 1000);\r",
									"}\r",
									"\r",
									"// 404 error checking\r",
									"if (pm.response.code === 404) {\r",
									"    console.log(\"Resource not found. Please check the URL and parameters.\");\r",
									"    pm.test(\"Resource not found\", function () {\r",
									"        pm.expect(pm.response.code).to.eql(404);\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Request was successful\", function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-GitHub-Api-Version",
								"value": "{{X-GitHub-Api-Version}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.github.com/repos/{{owner}}/{{repo}}/contents/{{path}}",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"repos",
								"{{owner}}",
								"{{repo}}",
								"contents",
								"{{path}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}